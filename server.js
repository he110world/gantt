// Generated by CoffeeScript 1.8.0
(function() {
  var Duplex, argv, backend, browserChannel, connect, livedb, livedbMongo, numClients, port, share, sharejs, webserver;

  Duplex = require('stream').Duplex;

  browserChannel = require('browserchannel').server;

  connect = require('connect');

  argv = require('optimist').argv;

  livedb = require('livedb');

  livedbMongo = require('livedb-mongo');

  try {
    require('heapdump');
  } catch (_error) {}

  sharejs = require('share');

  webserver = connect(connect["static"]("" + __dirname + "/public"), connect["static"](sharejs.scriptsDir));

  backend = livedb.client(livedbMongo('mongodb://localhost:27017/test?auto_reconnect', {
    safe: false
  }));

  backend.addProjection('_users', 'users', 'json0', {
    x: true
  });

  share = sharejs.server.createClient({
    backend: backend
  });


  /*
  share.use 'validate', (req, callback) ->
    err = 'noooo' if req.snapshot.data?.match /x/
    callback err
  
  share.use 'connect', (req, callback) ->
    console.log req.agent
    callback()
   */

  numClients = 0;

  webserver.use(browserChannel({
    webserver: webserver,
    sessionTimeoutInterval: 5000
  }, function(client) {
    var stream;
    numClients++;
    stream = new Duplex({
      objectMode: true
    });
    stream._write = function(chunk, encoding, callback) {
      console.log('s->c ', JSON.stringify(chunk));
      if (client.state !== 'closed') {
        client.send(chunk);
      }
      return callback();
    };
    stream._read = function() {};
    stream.headers = client.headers;
    stream.remoteAddress = stream.address;
    client.on('message', function(data) {
      console.log('c->s ', JSON.stringify(data));
      return stream.push(data);
    });
    stream.on('error', function(msg) {
      return client.stop();
    });
    client.on('close', function(reason) {
      stream.push(null);
      stream.emit('close');
      numClients--;
      return console.log('client went away', numClients);
    });
    stream.on('end', function() {
      return client.close();
    });
    return share.listen(stream);
  }));

  webserver.use('/doc', share.rest());

  port = argv.p || 7007;

  webserver.listen(port);

  console.log("Listening on http://localhost:" + port + "/");

}).call(this);
